import re
import os


class ConfFile:
    """Abstract class ConfFile
    """
    # Attributes:
    path = None  # ()

    # Operations
    def __init__(self, name):
        self.name = name
        self.setpath()
        self.filename = os.path.join(self.getpath(), self.name)
        self.createfile()

    def readlines(self):
        """function readlines

        returns list
        """
        with open(self.filename) as conf:
            data = conf.readlines()
        return data



    def writelines(self, seq):
        """function writelines

        seq:

        returns None
        """
        with open(self.filename, 'w') as conf:
            conf.writelines(seq)


    def stream_edit(self, pat, new):
        """function stream_edit

        pat: pattern
        new: str

        returns None
        """
        data = self.readlines()
        matched = self.like(pat, data)
        if not matched:
            try:
                data.append(new + '\n')
            except TypeError as err:
                raise err
                #data.append(' '.join(new) + '\n')
        else:
            matched = matched[0]
            ind = data.index(matched)
            try:
                data[ind] = new + '\n'
            except TypeError as err:
                raise err
                #data[ind] = ' '.join(new) + '\n'
        self.writelines(data)


    def like(self, pat, data):
        """returns matched data
        in a list
        returns empty list for non-matching
        """
        c_pat = re.compile(pat)
        matched = filter(c_pat.match, data)
        return matched

    def delete(self, pattern = ".*"):
        """function delete

        pattern:

        returns None
        """
        data = self.readlines()
        matched = self.like(pattern, data)
        if matched:
            #data = list(set(data) - set(matched))
            data = filter(lambda x: x not in matched, data)
        self.writelines(data)

    def getpath(self):
        """function getpath

        returns str
        """
        with open('.path') as loc:
            path = loc.read()
        return path

    def setpath(self, path = 'default'):
        """function setpath

        returns None
        """
        if path == 'default':
            with open('.path', 'w') as loc:
                loc.write(os.getcwd())
        else:
            with open('.path', 'w') as loc:
                loc.write(path)


    def createfile(self):
        """Creates default
        configuration file

        returns None
        """
        if not os.path.exists(os.path.dirname(self.filename)):
            os.makedirs(os.path.dirname(self.filename))
        if not os.path.exists(self.filename):
            with open(self.filename, 'w') as conf:
                conf.write("#File auto-generated by python\n\n")
